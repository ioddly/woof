- distributability
-- clean up source a little bit
--- move big functions to separate source file
--- allow optionally prelude.fs in globbed header
--- allow including C++ extensions in globbed header
- control flow
xx did basic loop
-- do? loop
- safety
x- better error reporting: format messages
   kind of done, i added some functions for this, 
   just need to make sure they're used throughout
- write basic prelude
- local variables
-- test more thoroughly, ensure they can be used throughout a word body
- throw/catch
  basic design  
  throw is easy enough -- just put an error message into scratch,
  and throw an error code
  // 
  catch is harder, do we need something like anonymous quotations?
  [ 1 2 3 ]
  [ recover ]
  8 catch
  seems easy enough
- also... anonymous quotations!
- tail call optimization
  just check for an OP_EXIT after an OP_CALL_FORTH in VM
  no need to do it in compiler
-- as a basic safety rubric, lets do enough to make it never segfault but nothing beyond that (type safety etc)
- DX
-- stack traces
- floating point numbers
- console (non interactive) game of life
- gfx bindings
- graphical game of life
- optimization
-- a pretty simple optimization would be to inline a lot of c words like arithmetic as opcodes
-- a less simple optimization would be to compile to machine code, but still fairly easy compared to writing one for a high level language
-- simple and wouldn't grow code a lot: dispatch tables for the VM
- embedded programming
-- ROM support -- can we support storing and reading forth code from ROM for maximum memory usage?
- code cleanliness
-- audit use of cell, it's kind of weird
   sometimes i use it to retrieve pointers, other times to set pointers
   maybe it should track actual offset in memory? rather than being raw bits
-- another thing that would be good is having facilities for things like generating jumps, fairly common
-- also, if i used pointers consistently and correctly, it would be possible to have functions like
   push/pop do address conversion

- metaprogramming
-- it would be possible (and better) for words to just be able to hijack the reader completely